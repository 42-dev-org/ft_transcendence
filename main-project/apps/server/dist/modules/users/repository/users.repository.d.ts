import { Prisma } from 'db';
import { PrismaService } from 'src/global/prisma/prisma.service';
export declare class UsersRepository {
    private readonly prisma;
    constructor(prisma: PrismaService);
    create(data: Prisma.UserCreateInput): Promise<{
        uid: string;
        createdAt: Date;
        updatedAt: Date;
        email: string;
        password: string;
        passwordChangedAt: Date;
        passwordResetToken: string;
        passwordResetTokenExpireDate: Date;
        profileImage: string;
        coverImage: string;
        firstName: string;
        lastName: string;
        country: string;
        state: string;
        roles: "User"[];
        status: "Accepted";
        ip: string;
        phoneNumber: string;
    }>;
    findOne(uid: string): Promise<{
        uid: string;
        createdAt: Date;
        updatedAt: Date;
        email: string;
        password: string;
        passwordChangedAt: Date;
        passwordResetToken: string;
        passwordResetTokenExpireDate: Date;
        profileImage: string;
        coverImage: string;
        firstName: string;
        lastName: string;
        country: string;
        state: string;
        roles: "User"[];
        status: "Accepted";
        ip: string;
        phoneNumber: string;
    }>;
    findAll(): Promise<{
        uid: string;
        createdAt: Date;
        updatedAt: Date;
        email: string;
        password: string;
        passwordChangedAt: Date;
        passwordResetToken: string;
        passwordResetTokenExpireDate: Date;
        profileImage: string;
        coverImage: string;
        firstName: string;
        lastName: string;
        country: string;
        state: string;
        roles: "User"[];
        status: "Accepted";
        ip: string;
        phoneNumber: string;
    }[]>;
    updateOne(data: Prisma.UserUpdateInput, uid: string): Promise<{
        uid: string;
        createdAt: Date;
        updatedAt: Date;
        email: string;
        password: string;
        passwordChangedAt: Date;
        passwordResetToken: string;
        passwordResetTokenExpireDate: Date;
        profileImage: string;
        coverImage: string;
        firstName: string;
        lastName: string;
        country: string;
        state: string;
        roles: "User"[];
        status: "Accepted";
        ip: string;
        phoneNumber: string;
    }>;
    deleteOne(uid: string): Promise<{
        uid: string;
        createdAt: Date;
        updatedAt: Date;
        email: string;
        password: string;
        passwordChangedAt: Date;
        passwordResetToken: string;
        passwordResetTokenExpireDate: Date;
        profileImage: string;
        coverImage: string;
        firstName: string;
        lastName: string;
        country: string;
        state: string;
        roles: "User"[];
        status: "Accepted";
        ip: string;
        phoneNumber: string;
    }>;
    findByEmail(email: string): Promise<{
        uid: string;
        createdAt: Date;
        updatedAt: Date;
        email: string;
        password: string;
        passwordChangedAt: Date;
        passwordResetToken: string;
        passwordResetTokenExpireDate: Date;
        profileImage: string;
        coverImage: string;
        firstName: string;
        lastName: string;
        country: string;
        state: string;
        roles: "User"[];
        status: "Accepted";
        ip: string;
        phoneNumber: string;
    }>;
    findByPasswordResetToken(passwordResetToken: string): Promise<{
        uid: string;
        createdAt: Date;
        updatedAt: Date;
        email: string;
        password: string;
        passwordChangedAt: Date;
        passwordResetToken: string;
        passwordResetTokenExpireDate: Date;
        profileImage: string;
        coverImage: string;
        firstName: string;
        lastName: string;
        country: string;
        state: string;
        roles: "User"[];
        status: "Accepted";
        ip: string;
        phoneNumber: string;
    }>;
}
