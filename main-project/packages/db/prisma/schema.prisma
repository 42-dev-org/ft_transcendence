// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Roles Enum
enum Roles {
  User
}

// User Account Status Enum
enum Status {
  Accepted
}

enum ConversationTypes {
  Group
  Single
}

model Media {
  // auto generated values
  uid       String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // BASIC INFOS
  mimtype String
  size    Float
  url     String @unique
  name    String

  // User Relation
  uploader    User   @relation(fields: [uploaderUid], references: [uid])
  uploaderUid String @map("uploader_uid")

  // Messages Relation
  message Message?

  @@index([uid])
  @@map("medias")
}

model User {
  // auto generated values
  uid       String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // login infos
  email String @unique

  // Profile and Cover Images
  profileImage String @default("https://upload.wikimedia.org/wikipedia/commons/7/72/Default-welcomer.png")

  // BASIC INFOS
  firstName String  @map("first_name")
  lastName  String  @map("last_name")
  login     String  @unique
  url       String
  phone     String
  kind      String
  roles     Roles[] @default([User])

  // Media Relation
  media Media[]

  status String @default("offline")

  // Messages Relation
  messages Message[]

  // Conversations Relations
  conversations      Conversation[] @relation("conversations")
  ownedConversations Conversation[] @relation("owned-conversations")

  // friendship
  myFriends Friend[] @relation("my-friends")
  friendOf  Friend[] @relation("friend-of")

  @@index([uid])
  @@map("users")
}

model Conversation {
  uid          String            @id @default(uuid())
  name         String
  description  String            @default("")
  tags         String[]
  type         ConversationTypes
  participants User[]            @relation("conversations")
  admins       User[]            @relation("owned-conversations")
  profileImage String?

  messages Message[]
}

model Message {
  // attributes
  uid     String  @id @default(uuid())
  content String?

  // user realtion
  sender    User?   @relation(fields: [senderUid], references: [uid])
  senderUid String? @map("sender_uid")


  // media relation
  media    Media?  @relation(fields: [mediaUid], references: [uid])
  mediaUid String? @unique @map("media_uid")

  // conversation relation
  conversation    Conversation? @relation(fields: [conversationUid], references: [uid])
  conversationUid String?       @map("conversation_uid")

  // metadata
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // friendship

  @@map("messages")
}

model Friend {
  uid String @id @default(uuid())

  user1    User   @relation("my-friends", fields: [user1uid], references: [uid])
  user1uid String
  user2    User   @relation("friend-of", fields: [user2uid], references: [uid])
  user2uid String

  status FriendStatus @default(Pending)

  bannedBy String?

  @@unique([user1uid, user2uid])
  @@unique([user2uid, user1uid])
  @@map("friends")
}

enum FriendStatus {
  Pending
  Accepted
  Banned
}

model Achivement {
  uid String @id @default(uuid())

  name  String
  rule  String
  grade AchivementGrade
}

enum AchivementGrade {
  Bronze
  Silver
  Gold
  Platnium
}
